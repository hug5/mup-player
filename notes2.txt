https://unix.stackexchange.com/questions/455183/mpv-how-to-get-information-about-media-being-played-through-command-line

# This may have some useful hints;


-------------
# This was from Perp; but doesn't seem to work;




Sources
man.archlinux.org favicon
reddit.com favicon
github.com favicon
linuxquestions.org favicon
wiki.archlinux.org favicon
View 5 more
Answer

Yes, a bash program can call mpv, capture its stdout, parse it, and create its own custom stdout. Here's how you can accomplish this:

    Call mpv and capture its output:

bash
mpv_output=$(mpv --no-terminal file.mp4 2>&1)

This command runs mpv with the --no-terminal option to disable terminal control codes, and captures both stdout and stderr.

    Parse the output:

You can use tools like grep, sed, or awk to parse the output. For example:

bash
# Extract playback time
playback_time=$(echo "$mpv_output" | grep "AV:" | sed -E 's/.*AV: *([0-9:]+).*/\1/')

# Extract video format
video_format=$(echo "$mpv_output" | grep "Video:" | sed -E 's/.*Video: ([^,]+).*/\1/')

    Create custom stdout:

Now you can use the parsed information to create your own custom output:

bash
echo "Custom MPV Output:"
echo "Playback time: $playback_time"
echo "Video format: $video_format"

Here's a complete example that puts it all together:

bash
#!/bin/bash

# Run mpv and capture output
mpv_output=$(mpv --no-terminal file.mp4 2>&1)

# Parse output
playback_time=$(echo "$mpv_output" | grep "AV:" | sed -E 's/.*AV: *([0-9:]+).*/\1/')
video_format=$(echo "$mpv_output" | grep "Video:" | sed -E 's/.*Video: ([^,]+).*/\1/')

# Create custom output
echo "Custom MPV Output:"
echo "Playback time: $playback_time"
echo "Video format: $video_format"

This script will run mpv, capture its output, parse it for specific information, and then print a custom formatted output. Remember that mpv's output format may change between versions, so you might need to adjust the parsing logic if you update mpv. Also, this method captures the entire output at once, which may not be suitable for very long videos or live streaming. For those cases, you might want to consider using a more sophisticated approach, such as running mpv in a background process and reading its output in real-time.